These are the plans for supporting internationalisation.
When internationalisation is turned off, all documents published are considered
to be in the default language.

When internationalisation is turned on, the default language setting becomes
mandatory. Also mandatory is the list of locales that are served to visitors.
All documents that are unconfigured regarding i18n are considered to be in the
default language.

To create a translation of an existing document, or to create a new document in
a language other than the default one, the user has to use the admin interface.

The i18n configuration for a file is located in the file's config. Each content
file can have a config file with the same name located in the .config
directory. The i18n configuration directives are:
  - id: all documents that are translations of the same content have the same id
  - locale: locale of the document in the format language or language_territory, for example en or en_US

The language of the document requested by the user is the first part of the path in the URL. 
For example:
	/nl_BE/bedrijven/presentatie.html

When this request is received, the language is first extracted:
  lang = nl_BE
then the path is passed to eat_path:
  node = eat_path("/bedrijven/presentatie.html", "nl_BE");

Let's say the content was first published in english, and the default language is set to english.
We have this directory structure:

-companies
 +-.config
   +-properties
   +-presentation.html.json
   +-presentatie.html.json
 +-presentation.html
 +-__sd_presentation.html
 +-__ld_presentation.html
 +-presentatie.html
 +-__sd_presentatie.fhtml
 +-__ld_presentatie.fhtml

The i18n content of properties is:
  nl_BE :
  	title:  bedrijven
this tells us that the name of the directory "companies" in the locale nl_BE is "bedrijven".

When the directory structure is crawled, all this info is put in the nodes. 
I18n information stored in the nodes gives the name of the node in other
languages. So in the node for the directory companies, we have the info:
  nl_BE: bedrijven

The node needs to provide the method getChildByName that can be called to get
the child handling i18n:
  root.getChildByName("bedrijven", "nl_BE")

and then get to the file node:
  dir_node.getChildByName("presentatie.html", "nl_BE")

once we have the node, we have access to its description in the language:
  node.getShortDescription("nl_BE")
  node.getLongDescription("nl_BE")

The short and long descriptions of each file is put in the same directory with
the following naming convention:
  - start with a double undescore: __
  - put the type of description it contains: sd for short, ld for long description
  - follow by an _
  - follow by the content filename without filename
  - give the .fhtml extension so it is identified as an html fragment and is indexed by the search engine.


A request for /companies/presentation.html would also be routed correctly: if
no locale is present in the URL, we use the default language. 
For search engine friendlyness (no duplicate content), we should redirect
/en_US/companies/presentation.html to /companies/presentation.html with a 301
status.

Questions/remarks:
- at the first request, when we detect the prefered locales of the browser, we
  should set in the session to the nearest locale that is served by the system
- the admin should have access to documents in locales that are not configured
  as being served. So he can test the site in a locale not yet available. (see
  below for proposed solution)
- how do we exclude from search index the content in a locale not yet served?
  This seems to make mandatory an environment dedicated to edition of content
  when the indexer does not run. The indexer would only run in the production
  environment where all documents present are to be served. However, this
  complicates the transfer of files from the edition env to the production env
  as files in not published locales should be excluded from the sync. I don't
  think that's possible.
  A possibly better solution is to add a check in Node.isAuthorized and return
  false if the language requested is not made available. that would put all
  content files on the prod server, but prevent the consultation by visitors
  and the presence of these documents in the search results.
- we should also limit search to the current language, and possibly enable
  search in all languages
- the archive of a directory should only contain content of the language served
